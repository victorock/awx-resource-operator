---
- name: Fetch Secret Record
  k8s_info:
    kind: Secret
    namespace: "{{ auth_caller_namespace }}"
    name: "{{ auth_caller_secret }}"
  register: _auth_secret_record

- name: Assert Secret resources
  ansible.builtin.assert:
    that:
      - _auth_secret_record["resources"] is defined and (_auth_secret_record["resources"]|length>0)
    fail_msg: "Tower Secret must exists"

- name: Assert Secret Host
  ansible.builtin.assert:
    that:
      - _auth_secret_record['resources'][0]['data']['host'] is defined
    fail_msg: "Tower Host must exist"

- name: Assert Secret token
  ansible.builtin.assert:
    that:
      - _auth_secret_record['resources'][0]['data']['token'] is defined
    fail_msg: "Tower Token must exist"

- name: Set Secret Data (b64decoded)
  ansible.builtin.set_fact:
    auth_secret_data:
      host: "{{ _auth_secret_data['resources'][0]['data']['host'] | b64decode }}"
      token: "{{ _auth_secret_data['resources'][0]['data']['token'] | b64decode }}"
      # ZmFsc2U= is 'False' decoded in b64
      verify_ssl: "{{ _auth_secret_data['resources'][0]['data']['verify_ssl'] | default('ZmFsc2U=') | b64decode }}"

- name: Annotate Object with tower_host
  k8s:
    definition:
      apiVersion: "{{ auth_caller_api_version }}"
      kind: "{{ auth_caller_kind }}"
      metadata:
        name: "{{ auth_caller_meta_name }}"
        namespace: "{{ auth_caller_meta_namespace }}"
        annotations:
          "tower.ansible.com/tower_host": "{{ auth_secret_data.host }}"
          "tower.ansible.com/tower_host_verify_ssl": "{{ auth_secret_data.verify_ssl }}"
